// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract DonorRegisterations {
    //state Variables
    //contract: 0xd9145CCE52D386f254917e481eB44e9943F39138
    //deployer: 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
    /*
    Donor struct
    id: unique identifier for the donor, GENERATED BY BACKEND.
    name: name of the donor
    bloodType: blood type of the donor
    */
    struct Donor {
        uint id;
        string name;
        string bloodType;
    }

    /*
    Donor array
    donors: array of donors
    */
    Donor[] public donors;

    /*
    Mapping of user address and thier ids
    */
    mapping(address => uint) public donorIDS;

    /*
    Owner/deployer address
    */
    address public owner;

    /*
    Total Donors registered
    donorCount
    */
    uint public donorCount;

    //events
    event donerRegistered(uint id, string name, string bloodType);

    //functions
    /*
    Constructor
    Initializes the owner address, and total donors registered
    */
    constructor() {
        owner = msg.sender;
        donorCount = 0;
    }

    /*
    Register donor
    id: unique identifier for the donor : WILL BE GENERATED BY BACKEND
    name: name of the donor
    bloodType: blood type of the donor
    */
    function registerDonor(
        uint id,
        string memory name,
        string memory bloodType
    ) public {
        Donor memory donor = Donor(id, name, bloodType);
        donors.push(donor);
        donorCount++;
        donorIDS[msg.sender] = id;
        emit donerRegistered(id, name, bloodType);
    }

    /*
    Get donor
    id: unique identifier for the donor
    */
    function getDonor(uint id) public view returns (Donor memory) {
        for (uint i = 0; i < donorCount; i++) {
            if (donors[i].id == id) {
                return donors[i];
            }
        }
        //revert if donor not found
        revert("No donor found");
    }

    /*
    function to get users ID
    */
    function getUserId(address user) public view returns (uint id) {
        return donorIDS[user];
    }

    /*
    Get all donors
    */
    function getAllDonors() public view returns (Donor[] memory) {
        return (donors);
    }
}
